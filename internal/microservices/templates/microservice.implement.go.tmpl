package {{ .Package | ToLowerCase }}

import (
    "strings"
    autogen "{{ .ImportPath }}"
    client "{{ .ClientPath }}"
	marshaller "github.com/vedadiyan/proton/pkg/marshaller"
	unmarshaller "github.com/vedadiyan/proton/pkg/unmarshaller"
)

var (
    defaultHeaders func() map[string]string    
)

func init() { 
    handler = fn
}

func fn (rq *autogen.{{ .Request | ToPascalCase }}) (*autogen.{{ .Response  | ToPascalCase }}, error) {
    toMap, err := marshaller.Marshall(rq)
    if err != nil {
        return nil, err
    }
    _rq := make(map[string]any)
    q := make(map[string]string)
    for k, v := range toMap {
        if strings.HasPrefix(k, "$") {
            if value, ok := v.(string); ok {
                q[strings.TrimPrefix(k, "$")] = value
                continue
            }
        }
        _rq[k] = v
    }
    var headers map[string]string
    if defaultHeaders != nil {
        headers = defaultHeaders()
    }
    res, err := client.{{ .Service | ToPascalCase }}Client(headers, _rq, q)
    if err != nil {
        return nil, err
    }        
    var fromMap autogen.{{ .Response  | ToPascalCase }}
    err = unmarshaller.Unmarshall(res, &fromMap)
    if err != nil {
        return nil, err
    }
    return &fromMap, nil
}