package {{ .Package | ToLowerCase }}

var (
{{- range $x := .Clients }}
    _{{ $x.Name | ToCamelCase}}Headers      http.IWebHeaderCollection
{{- end }}
)
{{- range $x := .Clients }}
{{- if not $x.ContentType "application/json"}}
    {{- continue }}
{{- end }}
func {{ $x.Name }}DefaultHeaders(m map[string]string) {
    _{{ $x.Name | ToCamelCase}}Headers = http.NewWebHeaderCollection() 
}

func {{ $x.Name }}Client(headers map[string]string, rq map[string]any, q map[string]string) (*{{ .Response }}, error) {
    url := http.Url({{ $x.URL }}, q)
    var request []byte
{{- if $x.Request }}
    json, err = json.Marshall(rq)
    if err != nil { 
        return nil, err
    }
    request = io.NopCloser(strings.NewReader(json))
{{- end }}
    res, err := http.Send(url, _{{ $x.Name | ToCamelCase}}Headers, {{ $x.Method }}, request)
    if err != nil { 
        return nil, err
    }
    decoder := _{{ $x.Name | ToCamelCase}}JSONDecoder = json.NewDecoder(res.Reader())
    response := {{ $.Response }}{}
    err := decoder(&response)
    if err != nil { 
        return nil, err
    }
    return response, nil
}
{{- end }}